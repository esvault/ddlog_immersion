typedef INT = bit<64>
typedef FLAG = bit<64>

typedef Nullable<'A> = NULL
		     | Val {value : 'A}

typedef pe_resource_t = Resource {
	id: INT
}

typedef pe_node_t = Node {
	id: INT
}

typedef pe_action_t = Action {
	id: INT,
	task: string,
	rsc: Nullable<pe_resource_t>,
	node: Nullable<pe_node_t>,
	flags: FLAG
}

typedef pe_order_t = Order {
	id: INT,
	flags: FLAG,
	
	l_rsc_id: INT,
	l_action_id: INT,
	l_task: string,
	
	r_rsc_id: INT,
	r_action_id: INT,
	r_task: string
}

function is_set(action: ActionRel, flag: FLAG): bool {
	(action.flags & flag) != 0
}

//======================= Отношения для основных сущностей pacemaker ========================

input relation ResourseRel(id: INT)
primary key(x) (x.id)

input relation NodeRel(id: INT)
primary key(x) (x.id)

input relation ActionRel(id: INT, task: string, rsc: Nullable<INT>, node: Nullable<INT>, flags: FLAG)
primary key(x) (x.id)



//=================== Отношения для списков actions_before, actions_after ===================

input relation InputActionsBefore(action_id: INT, l_action_id: INT, r_action_id: INT)
primary key(x) (x.action_id, x.l_action_id)

input relation InputActionsAfter(action_id: INT, l_action_id: INT, r_action_id: INT)
primary key(x) (x.action_id, x.l_action_id)

output relation ActionsBefore(action_id: INT, l_action_id: INT, r_action_id: INT)
output relation ActionsAfter(action_id: INT, l_action_id: INT, r_action_id: INT)

ActionsBefore(id, l_id, r_id) :- InputActionsBefore(id, l_id, r_id).
ActionsAfter(id, l_id, r_id) :- InputActionsAfter(id, l_id, r_id).


//================================== Отношение для Wrapper ==================================


output relation ActionWrapper(action_id: INT, ordering_type: FLAG)

ActionWrapper(id, 0) :- ActionRel(id, _, _, _, _).


//================================== Отношения для флагов ===================================

output relation ActionRequiresAny[ActionRel]
ActionRequiresAny[action] :- ActionRel[action], is_set(action, 64'h01000).

			 
output relation ActionRunnable[ActionRel]
ActionRunnable[action] :- ActionRel[action], is_set(action, 64'h00002).


output relation ActionOptional[ActionRel]
ActionOptional[action] :- ActionRel[action], is_set(action, 64'h00004).

		      
output relation ActionPseudo[ActionRel]
ActionPseudo[action] :- ActionRel[action], is_set(action, 64'h00001).


output relation UpdatedThen[ActionRel]
output relation UpdatedFirst[ActionRel]

		      


//================================== Отношение для Order ====================================

input relation OrderRel(
	id: INT,
	flags: FLAG,
	
	l_rsc_id: INT,
	l_action_id: INT,
	l_task: string,
	
	r_rsc_id: INT,
	r_action_id: INT,
	r_task: string
)
